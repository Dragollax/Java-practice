import java.util.Scanner; 
public class Main{
public static void main(String[] args) {
/*-------------------Project Description----------------------
   Lab:07st "open ended lab"
   Custom lab name: Apple Company Simulator
   Special case: I was exempt from the original lab, and allowed to create my own lab that demonstrates my learning of modular programming through 
   chapter 7
   
   There are 3 classes: CEO, Manager, and Employee
   CEO has 5 class methods
   Manager has 6 class methods
   Employee has 3 class methods
   This satisfies the 110 point version of the original lab(the number of methods, and in separate files)
   -----------------------------------------------------------
   How it works: 
      You start off as a ceo, by entering your name. You can then hire managers, which can then hire employees. The ceo cannot hire employees,
   only managers, so you need to hire employees through managers. When hiring a manager as a ceo, you will be asked to enter a fixed name and salary,
   you are basically a god, creating managers and employees. You can then use that manager created to hire an employee, by typing in "manager", which 
   makes you select a manager they want to be by entering a manager ID. If that manager exists, that manager can then hire employees, which
   is the same process, name and salary. Except you will be given the option to promote or demote this employee by decreasing or increasing their 
   salary. To switch to a worker, you will need to type "employee", then type in the employee ID that it will ask for. If that employee exists, 
   you will be given a set of options, part of one is to work. This will generate revenue for the company by asking you to type in random words
   into the terminal. After you are done, you can check how much money you have made by exiting(it will tell you how), and typing in "profile". 
   You can then switch back to CEO position, and check how much money your company has generated. The things that you can do for each role are 
   mentioned in documentation created below.
   -----------------------------------------------------------
   What is the point of this project?
      This whole project was just so that I could make a basic simulation of a company that can earn money all the way until the java datatype int
      crashes. This was also a good practice in using different skills like modular programming, arraylist...etc
   -----------------------------------------------------------
   Documentation for each role:
   For each role, to switch to another role, simply enter the role to switch to that role
      For Manager role: 
         It will ask you to enter a manager's id, for you to be that manager. If it doesn't exist, it will return a "not found" error. 
         Use 'managers' in CEO role to see all manager IDs(mentioned in documentation below)
      For Employee role:
         Same as manager, except with an employee's id.
         Use 'employees' in Manager role to see all employee IDs(mentioned in documentation below)
      For CEO role:
         there is only one CEO, so you will immediately become the ceo once you have typed in 'ceo'
  
   CEO:
     'managers': Displays all the manager IDs
     'hire': Create a manager to hire, will ask you to enter a name, and salary for that manager. 
     'fire': Remove a manager that was hired. Will ask you to enter the manager ID. Will return an error if manager does not exist, the employees
     that are managed by this manager will also be removed from arraylist that contains all of the employees in the company. However, the company's
     worth will still be kept the same at whatever the new value is. Use 'managers' to see all existing manager IDs.
     'all': Displays all employee IDs in the company
     'worth': Displays the company worth 
     'End': This will terminate the program
   
   Manager:
     'hire': Create an employee, will ask you to enter a name, and salary for that employee
     'fire': Remove an employee that was hired. Will ask you to enter the Employee ID. Will return error if employee does not exist. The money 
     generated by that employee will still be kept in the total company's worth. Use 'employees'(mentioned below) to see all existing employee
     IDs
     'profile': Displays the current manager's profile(the one that you have selected to be) name, id, and salary
     'employees' :  Displays all the employee IDs that the current manager manages
     'demote': Will ask you to enter an employee ID, and the new salary you wish to give them. Salary must be lower than their original, 
     or else it will return an error
     'promote': Will ask you to enter an employee ID, and the new salary you wish to give them. Salary must be higher than their origial, 
     or else it will return an error
     'End': Same thing as CEO 
   
   Employee:
     'work' : Will ask you to type anything into the terminal. Each random word or sentence gives 100$
     this will add to the Employee's total money generated, and add to the company worth
     'profile' : Displays the current employee's profile(the one that you have selected to be) name, manager, salary, id, and total
     money generated
     'End' : same thing as CEO 
*/    
    Scanner name = new Scanner(System.in);  // Create a Scanner object
    System.out.println("Please enter your name as CEO for the company Apple");

    String enteredname = name.nextLine();  // Read user input
    CEO newCeo = new CEO(enteredname);

    System.out.println("You have entered " + enteredname + " as your name for ceo");  // Output user input
    
    GetResponse(newCeo, enteredname);

   	}
   
   public static void GetResponse(CEO passed_ceo, String ceoName){
      //two things needed to authenticate user: string value "state", along with one of the 3 ceo, manager, and employee objects.
      String state = " ";
      String ceo_name = ceoName;
      CEO current_ceo = passed_ceo;
      Manager current_manager = new Manager(); //temporary object holder for manager, will act as a current user attribute
      Employee current_employee = new Employee(); //temporary object holder for employee, will act as a current user attribute
      int id;
      int said = 0;
      int count = 0;
      Scanner next = new Scanner(System.in);  
      System.out.println("What would you like to do next?");
      if(count == 0){
      System.out.println("You can switch roles as ceo, manager, or employee, and see what you can do from there!");
      count++;
      }
      String statement = next.nextLine();
      
      while(!statement.equals("End")){
        
         if (statement.toLowerCase().equals("manager")){
            statement = "";
            System.out.println("Great! Enter a manager id to become them!");
            Scanner next1 = new Scanner(System.in);  
            id = next1.nextInt();
            int count2 = 0;
            boolean found = false;
            while(count2 < current_ceo.managers.size() && found == false){
               if(current_ceo.managers.get(count2).id == id){
                  current_manager = current_ceo.managers.get(count2);
                  System.out.println("You are now a manager with id of " + id);
                  System.out.println("(Manager) Options are: enter any of the 3 roles to switch roles, 'hire', 'fire','employees','profile','promote,'demote', or 'end'. Warning: 'end' will terminate the program");
                  found = true;
                  state = "manager";
               }
               count2++;
            }
            if(count2 == current_ceo.managers.size() && found == false){
            System.out.println("The manager you entered does not exist!");
            System.out.println("Please try something else as a/an " + state);

            }
         }
         else if(statement.toLowerCase().equals("ceo")){
            state = "ceo";
            System.out.println("(CEO) Options are: enter any of the 3 roles to switch roles, 'managers', 'hire', 'fire', 'all', 'worth',  or 'end'. Warning: 'end' will terminate the program");
            statement = "";
         }
         else if(statement.toLowerCase().equals("employee")){
            System.out.println("Enter an employee id to become them!");
            Scanner next2 = new Scanner(System.in);  
            id = next2.nextInt();
            boolean found = false;
            int count3 = 0;
            statement = "";
            while (count3 < current_ceo.TotalEmployees.size() && found == false){
               if(current_ceo.TotalEmployees.get(count3).id == id){
                  current_employee = current_ceo.TotalEmployees.get(count3);
                  System.out.println("You are now an employee with id of " + id);
                  System.out.println("(Employee) Options are: enter any of the 3 roles to switch roles, 'work', 'profile',  or 'end'. Warning: 'end' will terminate the program ");
                  found = true;
                  statement = "";
                  state = "employee";
               }
               count3++;
            }
            
            if(count3 == current_ceo.TotalEmployees.size() && found == false){
               System.out.println("The employee you entered does not exist, please try again!");
               System.out.println("Please try something else as a " + state);               
            }
         }
         
         else{
         if(said == 0){
            switch(state){
            case "ceo":
               System.out.println("(CEO) Options are: enter any of the 3 roles to switch roles, 'managers', 'hire', 'fire', 'all', 'worth', or 'end'. Warning: 'end' will terminate the program");
               said++;
               break;
            case "manager":
               System.out.println("(Manager) Options are: enter any of the 3 roles to switch roles, 'hire', 'fire','profile', 'employees, 'promote', 'demote', or 'end'. Warning: 'end' will terminate the program");
               said++;
               break;
            case "employee":
               System.out.println("(Employee) Options are: enter any of the 3 roles to switch roles, 'work', 'profile',  or 'end'. Warning: 'end' will terminate the program");
               said++;
               break;
            }
        }
    }
         statement = next.nextLine(); 
         switch(statement){
         case "hire":
            if(state != "employee"){//1
               if(state == "ceo"){//2
                  String name = "";
                  int salary = 0;
                  System.out.println("You are hiring as a " + state + ", enter name for the hire");
                  name = next.nextLine();
                  System.out.println("Enter salary for the hire");
                  salary = next.nextInt();
                  current_ceo.HireManager(name, salary, ceo_name);
                  System.out.println("Great!");
                  statement = " ";
                  said = 0;
               }//2
               else if (state == "manager"){//3
                  String name = "";
                  int salary = 0;
                  System.out.println("You are hiring as a " + state + ", enter name for the hire");
                  name = next.nextLine();
                  System.out.println("Enter salary for the hire");
                  salary = next.nextInt();
                  int hired_id = current_manager.HireEmployee(name, salary, current_manager);
                  System.out.println("Sucessfully hired employee with ID " +  hired_id);
                  statement = " ";
                  said = 0;
                  int countemp = 0;
                  while(true){
                     if(current_manager.employees.get(countemp).id == hired_id){
                        current_ceo.AddTotalEmployee(current_manager.employees.get(countemp));
                        countemp++;
                        break;
                     }
                     countemp++; 
                  }

               }
            }
            else{
            System.out.println("You cannot hire as an employee!");
            }
            break;
         case "fire":
            if(state != "employee"){ //only two states possible: ceo or manager
              if(state == "ceo"){
                  System.out.println("Enter manager id");
                  Scanner inp = new Scanner(System.in);
                  int id1 = inp.nextInt();
                  current_ceo.FireManager(id1);
                  said = 0;
              }
              else{
                  System.out.println("Enter employee id");
                  Scanner get = new Scanner(System.in);
                  int id1 = get.nextInt();
                  current_manager.FireEmployee(id1, current_ceo);
                  said = 0;
              }            
            }
            else{
               System.out.println("You cannot fire as an employee!");
               said = 0;
            }
            break;
         case "work":
            int said2 = 0;
            if(state == "employee"){
               if(said2 == 0){
                  System.out.println("You are currently an employee! Each sentence or word you type will generate the company 100$ enter 'stop' to stop working");
                  said2++;
               }
               Scanner enter = new Scanner(System.in);
               String words = enter.nextLine();
               while(true){
               current_employee.GenerateMoney(words);
               System.out.println(words);
               words = enter.nextLine();
               if(words.toLowerCase().equals("stop")){
                  System.out.println("Going back to employee home page...");
                  said = 0;
                  break;
                  
               }
               }
            
            }
            else{
               System.out.println("you cannot work unless you are an employee, you are currently a " + state);
               said = 0;
            }
            break;
         case "profile":
            if(state == "employee"){
               current_employee.ShowProfile();
               System.out.println("Your generated money: " + current_employee.GeneratedMoney);
               said = 0;
            }
            else if (state == "manager"){
               current_manager.CheckProfile();
               said = 0;
            }
            else{
               System.out.println("You can only check your profile as an employee or as a manager, its pointless if you are a ceo!");
               said = 0;
            }
            break;
         case "worth":
            if(state == "ceo"){
               current_ceo.DisplayCompanyWorth();
               said = 0;
            }
            else{
               System.out.println("You cannot check the company worth as a/an " + state);
               said = 0;
            }
            break;
         case "managers":
            if(state == "ceo"){
               said = 0;
               System.out.println("Displaying all manager IDs: " + current_ceo.ShowAllManagers());
            }
            else{
               said = 0;
               System.out.println("You cannot do this as a/an " + state);
            }
            break;
         case "all":
            if(state != "ceo"){
               said = 0;
               System.out.println("You cannot do this as a/an " + state);
            }
            else{
               said = 0;
               current_ceo.AllEmployees();   
            }
            break;
         case "promote":
            if(state == "manager"){
               System.out.println("Enter Employee id");
               Scanner getin = new Scanner(System.in);
               int enteredID = getin.nextInt();
               System.out.println("Enter new salary");
               int enteredSalary = getin.nextInt();
               current_manager.PromoteEmployee(enteredID, enteredSalary);
               said = 0;
            }
            else{
               System.out.println("You cannot promote an employee as a/an " + state);
               said = 0;
            }
            break;
         case "demote":
            if(state =="manager"){
               System.out.println("Enter Employee id");
               Scanner getin = new Scanner(System.in);
               int enteredID = getin.nextInt();
               System.out.println("Enter new salary");
               int enteredSalary = getin.nextInt();            
               current_manager.DemoteEmployee(enteredID, enteredSalary);
               said = 0;
            }
            else{
               System.out.println("You cannot demote an employee as a/an " + state);
               said = 0;
            }
         break;
         case "employees":
            if(state == "manager"){
               current_manager.DisplayEmployees();
               said = 0;
            }
            else{
               System.out.println("You cannot use this as a/an " + state);
               said = 0;
            }
         break;
         case "End":
            System.out.println("Are you sure you want to terminate this program? ");
            Scanner sure = new Scanner(System.in);
            String answer = sure.nextLine();
            if(answer.toLowerCase().equals("yes")){
               System.out.println("OK!");
               break;
            }
            else{
               System.out.println("You have chosen not to end this program!");
               statement = "";
            }
         }
         
         
         
         
         
         
         }

    }

         
            }
